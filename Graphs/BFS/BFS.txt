BFS is a graph traversal algorithm that explores all the vertices at the current depth level before moving on to vertices at the next depth level. It uses a **queue** data structure to keep track of the vertices to visit.


Key Characteristics of BFS:
1. Visits all vertices and edges layer by layer.
2. Uses a queue for iterative implementation.
3. Finds the shortest path in an unweighted graph.
4. Used in:
   - Shortest path algorithms
   - Level-order traversal of trees
   - Solving maze problems


Time and Space Complexity:
- Time Complexity: O(V + E)
  - V: Number of vertices
  - E: Number of edges
- Space Complexity: O(V)
  - Space is required for the queue and visited array.

Explanation:
1. Graph Representation:
   - The graph is represented using an adjacency list.
   - Each vertex has a list of its adjacent vertices.

2. BFS Function:
   - Uses a queue to keep track of vertices to visit.
   - Marks vertices as visited and processes them in level order.

3. Main Function:
   - Creates a graph with 6 vertices.
   - Adds edges to form a sample graph.
   - Starts BFS from vertex 0.
